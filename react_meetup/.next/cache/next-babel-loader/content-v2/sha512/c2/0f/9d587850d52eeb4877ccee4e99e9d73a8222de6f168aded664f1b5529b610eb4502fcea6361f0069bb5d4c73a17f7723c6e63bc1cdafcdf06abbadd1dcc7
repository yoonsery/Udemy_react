{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sery/Desktop/udemy/react/react_meetup/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.MeetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(`mongodb+srv://yoonsery:${process.env.REACT_APP_MONGODB_PASSWORD}@cluster0.wb3vgzu.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(`mongodb+srv://yoonsery:${process.env.REACT_APP_MONGODB_PASSWORD}@cluster0.wb3vgzu.mongodb.net/meetups?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/sery/Desktop/udemy/react/react_meetup/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Head","MeetupDetail","MeetupDetails","props","MeetupData","title","meetupData","description","image","address","getStaticPaths","client","connect","process","env","REACT_APP_MONGODB_PASSWORD","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACG,UAAN,CAAiBC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEJ,KAAK,CAACG,UAAN,CAAiBE,KAD1B;AAEE,MAAA,KAAK,EAAEL,KAAK,CAACG,UAAN,CAAiBD,KAF1B;AAGE,MAAA,OAAO,EAAEF,KAAK,CAACG,UAAN,CAAiBG,OAH5B;AAIE,MAAA,WAAW,EAAEN,KAAK,CAACG,UAAN,CAAiBC;AAJhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAcD;;AAED,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAClB,0BAAyBC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,mEAD9C,CAArB;AAGA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAX,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMlB,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CAClB,0BAAyBC,OAAO,CAACC,GAAR,CAAYC,0BAA2B,mEAD9C,CAArB;AAGA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEtB,QAAQ,CAAC8B,QAAD;AADwC,GAA1B,CAA7B;AAIAlB,EAAAA,MAAM,CAACY,KAAP;AAEA,SAAO;AACLpB,IAAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAE;AACV6B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVzB,QAAAA,KAAK,EAAE4B,cAAc,CAAC5B,KAFZ;AAGVI,QAAAA,OAAO,EAAEwB,cAAc,CAACxB,OAHd;AAIVD,QAAAA,KAAK,EAAEyB,cAAc,CAACzB,KAJZ;AAKVD,QAAAA,WAAW,EAAE0B,cAAc,CAAC1B;AALlB;AADP;AADF,GAAP;AAWD;AAED,eAAeL,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <>\n      <Head>\n        <title>{props.MeetupData.title}</title>\n        <meta name=\"description\" content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    `mongodb+srv://yoonsery:${process.env.REACT_APP_MONGODB_PASSWORD}@cluster0.wb3vgzu.mongodb.net/meetups?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    `mongodb+srv://yoonsery:${process.env.REACT_APP_MONGODB_PASSWORD}@cluster0.wb3vgzu.mongodb.net/meetups?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}