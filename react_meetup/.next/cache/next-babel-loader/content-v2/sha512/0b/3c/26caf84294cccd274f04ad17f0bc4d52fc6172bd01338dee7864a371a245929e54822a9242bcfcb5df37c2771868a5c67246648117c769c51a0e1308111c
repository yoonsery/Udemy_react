{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sery/Desktop/udemy/react/react_meetup/pages/index.js\";\nimport Head from 'next/head';\nimport MeetupList from '../components/meetups/MeetupList';\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"To make meetup page to practice React & nextJS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // âœ¨ If you have a data that changes multiple times every second, getServerSideProps are better\n// ðŸ¤” Need to wait for the page to be generated on every incoming request\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   // fetch data from an API or a file system\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n// âœ¨ If you don't need to the request object(eg. authentication) getStaticProps is better choice than getServerSideProps.\n//  faster than regenerating & fetching data for every incoming request\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/sery/Desktop/udemy/react/react_meetup/pages/index.js"],"names":["Head","MeetupList","HomePage","props","meetups"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;;AAGA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,OAAO,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAYD,C,CAED;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;KAhCSF,Q;;AA6DT,eAAeA,QAAf","sourcesContent":["import Head from 'next/head';\nimport MeetupList from '../components/meetups/MeetupList';\nimport { MongoClient } from 'mongodb';\n\nfunction HomePage(props) {\n  return (\n    <>\n      <Head>\n        <title>React Meetups</title>\n        <meta\n          name=\"description\"\n          content=\"To make meetup page to practice React & nextJS\"\n        />\n      </Head>\n      <MeetupList meetups={props.meetups} />\n    </>\n  );\n}\n\n// âœ¨ If you have a data that changes multiple times every second, getServerSideProps are better\n// ðŸ¤” Need to wait for the page to be generated on every incoming request\n\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n\n//   // fetch data from an API or a file system\n\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n\n// âœ¨ If you don't need to the request object(eg. authentication) getStaticProps is better choice than getServerSideProps.\n//  faster than regenerating & fetching data for every incoming request\n\nexport async function getStaticProps() {\n  // fetch data from an API\n\n  const client = await MongoClient.connect(\n    `mongodb+srv://yoonsery:${process.env.REACT_APP_MONGODB_PASSWORD}@cluster0.wb3vgzu.mongodb.net/meetups?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close();\n\n  return {\n    props: {\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString(),\n      })),\n    },\n    revalidate: 3600, // ì´ˆë‹¨ìœ„ë¡œ ì„¤ì •í•˜ë¯€ë¡œ 1ì‹œê°„\n  };\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}